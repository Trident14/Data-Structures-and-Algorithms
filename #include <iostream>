#include <iostream>
#include <vector>
#include <unordered_map>
#include <set>
using namespace std;

int countIdealPoints(const vector<int>& x, const vector<int>& y) {
    int n = x.size();

    // Map each x to all y coordinates in that x (row), and each y to all x coordinates in that y (column)
    unordered_map<int, set<int>> row, col;

    for (int i = 0; i < n; i++) {
        row[x[i]].insert(y[i]);
        col[y[i]].insert(x[i]);
    }

    int count = 0;

    for (int i = 0; i < n; i++) {
        int cx = x[i], cy = y[i];

        // Check for point above and below
        const auto& ySet = row[cx];
        bool hasTop = (ySet.upper_bound(cy) != ySet.end());
        bool hasBottom = (ySet.lower_bound(cy) != ySet.begin());

        // Check for point left and right
        const auto& xSet = col[cy];
        bool hasRight = (xSet.upper_bound(cx) != xSet.end());
        bool hasLeft = (xSet.lower_bound(cx) != xSet.begin());

        if (hasTop && hasBottom && hasLeft && hasRight) {
            count++;
        }
    }

    return count;
}

int main() {
    int n;
    cin >> n;
    vector<int> x(n), y(n);

    for (int i = 0; i < n; i++) {
        cin >> x[i] >> y[i];
    }

    cout << countIdealPoints(x, y) << endl;

    return 0;
}
